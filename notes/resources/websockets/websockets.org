#+TITLE: WebSockets
#+DATE: [2019-05-29 Wed 14:20]
#+AUTHOR: Damian Chrzanowski
#+EMAIL: pjdamian.chrzanowski@gmail.com
#+OPTIONS: H:2 toc:2
#+HTML_HEAD: <link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro" rel="stylesheet">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../assets/org.css"/>
#+HTML_HEAD: <link rel="icon" href="../../assets/favicon.ico">

[[file:../../index.org][Home Page]]

* [[https://socket.io/][Official Docs]]

* Installation
  - Server
  #+begin_src shell
  npm i socket.io
  #+end_src
  - Client (server side)
  #+begin_src shell
  npm i socket.io-client
  #+end_src

* JS

** Sample server script
   #+begin_src js
     var app = require('express')();
     var server = require('http').Server(app);
     var io = require('socket.io')(server);

     server.listen(8000);
     console.log('-- Server Listening on http://localhost:8000 --');

     // broadcast a message to all connected
     // e.g. http://localhost:8000/broadcast?msg=HelloWorld
     app.get('/broadcast', (req, res) => {
         var msg = req.query.msg;
         io.emit('msg', { msg: 'msg'});
         res.end();
     });

     // send a message to a particular client
     // e.g. http://localhost:8000/msg?id=SOCKET.ID&msg=HelloWorld
     app.get('/msg', (req, res) => {
         var socketId = req.query.id;
         var msg = req.query.msg;

         io.to(socketId).emit('msg', { msg: msg });
         res.end();
     });

     // listen for incoming connections
     io.on('connection', (socket) => {
         // print out auth details sent from the client
         console.log("Client Auth: pass=" + socket.handshake.query.pass + ", user=" + socket.handshake.query.user);
         // print out the Socket ID that is assigned automatically upon a new connection
         console.log('Client ID: ' + socket.id + ' connected');

         // Print out a message sent from a client
         socket.on('msg', (data) => {
             console.log('Client ID: ' + socket.id + ' , says: ' + JSON.stringify(data, null, 2));
         });

         // Notify of client disconnecting
         socket.on('disconnect', () => {
             console.log('Client ID: ' + socket.id + ' disconnected');
         });

         // Send a message to the client. In this case let the client know its id
         socket.emit('msg', { id: socket.id});
     });
   #+end_src

** Sample server-side client script
   #+begin_src js
     var clientNum = 1;
     var port = 8000 + clientNum;
     var app = require('express')();
     var server = require('http').Server(app);
     var socket = require('socket.io-client')('http://localhost:8000', { query: 'pass=FooBaz' + clientNum + '&user=FooBar' + clientNum});

     server.listen(port);
     console.log('-- Server Listening on http://localhost:' + port + ' --');

     // send a message to the server
     // e.g. http://localhost:8001/msg?msg=HelloWorld
     app.get('/msg', (req, res) => {
         var msg = req.query.msg;
         socket.emit('msg', { msg: msg});
         res.end();
     });

     // disconnect from the server
     app.get('/exit', (req, res) => {
         socket.disconnect();
         res.end();
     });

     // on connect
     socket.on('connect', () => {
         console.log('client ' + clientNum + ' connected');
     });

     // on message received
     socket.on('msg', (data) => {
         console.log('client ' + clientNum + ' msg: ', data);
     });

     // on disconnect
     socket.on('disconnect', () => {
         console.log('client ' + clientNum + ' disconnected');
     });

     console.log('-- Client ' + clientNum + ' Started --');
   #+end_src

** Emitter cheatsheet
   #+begin_src js
     io.on('connect', onConnect);

     function onConnect(socket){

         // sending to the client
         socket.emit('hello', 'can you hear me?', 1, 2, 'abc');

         // sending to all clients except sender
         socket.broadcast.emit('broadcast', 'hello friends!');

         // sending to all clients in 'game' room except sender
         socket.to('game').emit('nice game', "let's play a game");

         // sending to all clients in 'game1' and/or in 'game2' room, except sender
         socket.to('game1').to('game2').emit('nice game', "let's play a game (too)");

         // sending to all clients in 'game' room, including sender
         io.in('game').emit('big-announcement', 'the game will start soon');

         // sending to all clients in namespace 'myNamespace', including sender
         io.of('myNamespace').emit('bigger-announcement', 'the tournament will start soon');

         // sending to a specific room in a specific namespace, including sender
         io.of('myNamespace').to('room').emit('event', 'message');

         // sending to individual socketid (private message)
         io.to(`${socketId}`).emit('hey', 'I just met you');

         // WARNING: `socket.to(socket.id).emit()` will NOT work, as it will send to everyone in the room
         // named `socket.id` but the sender. Please use the classic `socket.emit()` instead.

         // sending with acknowledgement
         socket.emit('question', 'do you think so?', function (answer) {});

         // sending without compression
         socket.compress(false).emit('uncompressed', "that's rough");

         // sending a message that might be dropped if the client is not ready to receive messages
         socket.volatile.emit('maybe', 'do you really need it?');

         // specifying whether the data to send has binary data
         socket.binary(false).emit('what', 'I have no binaries!');

         // sending to all clients on this node (when using multiple nodes)
         io.local.emit('hi', 'my lovely babies');

         // sending to all connected clients
         io.emit('an event sent to all connected clients');
     };
   #+end_src

* NestJS

** Server
   - In NestJS we simply create the whole code as a ~provider~ which reacts to events on its own, but can also be injected as a service to access any socket.io server methods
   #+begin_src typescript
     import {
         SubscribeMessage,
         WebSocketGateway,
         WebSocketServer,
         OnGatewayConnection,
         OnGatewayDisconnect,
     } from '@nestjs/websockets';
     import { Client, Server } from 'socket.io';

     @WebSocketGateway(8000)
     export class EventsGateway implements OnGatewayConnection, OnGatewayDisconnect {
         @WebSocketServer()
         server: Server;

         // listen for 'msg' events
         @SubscribeMessage('msg')
         async msg(client: Client, data: string) {
             console.log("Client ID: " + client.id + ", says:" + JSON.stringify(data));
             return;
         }

         // Required by OnGatewayConnection interface to listen to new connections
         handleConnection(client: any, ...args: any[]) {
             console.log("Client ID: " + client.id + " connected");
             console.log("Client Auth: pass=" + client.handshake.query.pass + ", user=" + client.handshake.query.user);
             this.server.emit('msg', { id: client.id });
             return;
         }

         // Required by OnGatewayDisconnect interface to listen for disconnections
         handleDisconnect(client: any) {
             console.log("Client ID: " + client.id + " disconnected");
             return;
         }

         // send a message to a specific socket id
         sendMsg(id: string, msg: string) {
             this.server.to(id).emit('msg', { msg: msg });
         }
     }
   #+end_src

   #+BEGIN_EXPORT html
   <script src="../../assets/jquery-3.3.1.min.js"></script>
   <script src="../../assets/notes.js"></script>
   #+END_EXPORT
